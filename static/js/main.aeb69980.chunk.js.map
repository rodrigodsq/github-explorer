{"version":3,"sources":["assets/github-background.svg","styles/global.ts","services/api.ts","assets/logo.svg","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["createGlobalStyle","githubBackground","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Reposiries","div","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storageRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","useEffect","setItem","stringify","handleAddRepository","useCallback","event","a","preventDefault","get","response","repository","data","src","logoImg","alt","onSubmit","placeholder","value","onChange","e","target","type","map","to","full_name","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","href","html_url","title","user","id","Routes","path","component","render","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aeb69980.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github-background.9c50d06c.svg\";","import { createGlobalStyle } from 'styled-components';\nimport githubBackground from '../assets/github-background.svg';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #F0F0F5 url(${githubBackground}) no-repeat 70% top;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font: 16px Roboto, sans-serif;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","export default __webpack_public_path__ + \"static/media/logo.469cc31b.svg\";","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 48px;\n  color: #3a3a3a;\n  max-width: 450px;\n  line-height: 56px;\n  margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n  display: flex;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    color: #3a3a3a;\n    border: 2px solid #fff;\n    border-right: 0;\n\n    //função no styled componets onde podemos receber um parametro do index, e fazer uma estilização caso seja truty;\n    ${(props) =>\n      props.hasError &&\n      css`\n        border-color: #c53030;\n      `}\n\n    &::placeholder {\n      color: #a8a8b3; // altera a cor do placeholder;\n    }\n  }\n\n  button {\n    width: 210px;\n    height: 70px;\n    background: #04d361;\n    border-radius: 0 5px 5px 0;\n    border: 0;\n    color: #fff;\n    font-weight: bold;\n    transition: background-color 0.2s; // colocando um delay ao mudar cor do button\n\n    // para o button escurecer 20% ao passar do mouse;\n    &:hover {\n      background: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n\nexport const Reposiries = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block; //por padrão a tag a vem com display inline;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    //a tag \"a\" vai 10px p direita ao passar o mouse;\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    // para aplicar margin so a partir da segunda tag \"a\", (temos uma lista de tag \"a\"), verifica se a ultima tag é \"a\" e coloca a margin\n    & + a {\n      margin-top: 16px;\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto; //vai estar sempre alinhado a direita;\n      color: #cbcbd6;\n    }\n  }\n`;\n","import React, { useState, FormEvent, useEffect, useCallback } from 'react';\nimport { FiChevronsRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\n\nimport api from '../../services/api';\nimport logoImg from '../../assets/logo.svg';\nimport { Title, Form, Reposiries, Error } from './styles';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n\n  // uma state que no definidor de tipo nos executamos umas função onde pegamos os dados do localstorage;\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storageRepositories = localStorage.getItem(\n      '@GithubExplorer:repositories',\n    );\n    if (storageRepositories) {\n      return JSON.parse(storageRepositories);\n    }\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  // event: FormEvent<HTMLFormElement>  :   tipando o parametro \"event\" como do typo submit;\n  const handleAddRepository = useCallback(\n    async (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      if (!newRepo) {\n        setInputError('Digite o autor/nome do repositorio!');\n        return;\n      }\n\n      try {\n        // api.get<Repository>  :   definindo o retorno dessa api do tipo Repository;\n        const response = await api.get<Repository>(`repos/${newRepo}`);\n\n        const repository = response.data;\n\n        setRepositories([...repositories, repository]);\n        setNewRepo('');\n        setInputError('');\n\n        // console.log(response.data);\n      } catch (err) {\n        setInputError('Erro na busca por esse repositorio!');\n      }\n    },\n    [newRepo, repositories],\n  );\n\n  return (\n    <>\n      <img src={logoImg} alt=\"Github explorer\" />\n      <Title>Explore repositórios no Github</Title>\n\n      {/* hasError={!!inputError} :   Verificando se tem algo na var \"inputError\" */}\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n        <input\n          placeholder=\"Digite o nome do repositorio\"\n          value={newRepo}\n          onChange={(e) => setNewRepo(e.target.value)}\n        />\n        <button type=\"submit\"> Pesquisar </button>\n      </Form>\n\n      {inputError && <Error> {inputError} </Error>}\n\n      <Reposiries>\n        {repositories.map((repository) => (\n          <Link\n            key={repository.full_name}\n            to={`/repositories/${repository.full_name}`}\n          >\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n\n            <FiChevronsRight size={20} />\n          </Link>\n        ))}\n      </Reposiries>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  transition: color 0.2s;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      // para aplicar espaço somente do 2º ul em diante;\n      & + li {\n        margin-left: 80px;\n      }\n\n      strong {\n        display: block; //utilizado para quebrar linhas, pq o flex é inline;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block; //por padrão a tag a vem com display inline;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    //a tag \"a\" vai 10px p direita ao passar o mouse;\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    // para aplicar margin so a partir da segunda tag \"a\", (temos uma lista de tag \"a\"), verifica se a ultima tag é \"a\" e coloca a margin\n    & + a {\n      margin-top: 16px;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto; //vai estar sempre alinhado a direita;\n      color: #cbcbd6;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronLeft, FiChevronsRight } from 'react-icons/fi';\n\nimport api from '../../services/api';\nimport logoImg from '../../assets/logo.svg';\nimport { Header, RepositoryInfo, Issues } from './styles';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface Issue {\n  id: number;\n  title: string;\n  html_url: string;\n  user: {\n    login: string;\n  };\n}\n\nconst Repository: React.FC = () => {\n  // tipando o useState para ser tanto do tipo \"Repository\" ou \"null\";\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    api.get(`repos/${params.repository}`).then((response) => {\n      setRepository(response.data);\n    });\n\n    api.get(`repos/${params.repository}/issues`).then((response) => {\n      setIssues(response.data);\n    });\n\n    // async function loadData(): Promise<void> {\n    //   // caso temos duas chamadas a api que sejam independentes (uma não precise da resposta da outra), utilizamos o Promise.all que executa duas promisses ao mesmo tempo e retorna seus resultados em forma de array, a primeira chamada do Promise.all vem na posição 1 ,a segunda chamada na 2 e assim por diante;\n    //   const [repository, issues] = await Promise.all([\n    //     api.get(`repos/${params.repository}`),\n    //     api.get(`repos/${params.repository}/issues`),\n    //   ]);\n\n    //   console.log(repository);\n    //   console.log(issues);\n    // }\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={logoImg} alt=\"Github explorer\" />\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n\n      {repository && (\n        <RepositoryInfo>\n          <header>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p> {repository.description} </p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>Stars</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>Issues abertas</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      )}\n\n      <Issues>\n        {issues.map((issue) => (\n          <a key={issue.id} href={issue.html_url}>\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n\n            <FiChevronsRight size={20} />\n          </a>\n        ))}\n      </Issues>\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/github-explorer\" component={Dashboard} />\n    <Route path=\"/repositories/:repository+\" component={Repository} />\n    <Route render={() => <Redirect to=\"/github-explorer\" />} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport GlobalStyle from './styles/global';\n\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter>\n      <Routes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}